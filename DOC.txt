Отлично, спасибо за файлы и пояснение! На основе предоставленного кода я составлю подробное описание приложения на русском языке, чтобы его можно было воссоздать с нуля. Описание будет структурированным, с акцентом на функциональность, архитектуру и ключевые параметры.
Описание приложения для захвата автомобильных номеров с камеры

Цель приложения:

Приложение предназначено для захвата изображений автомобильных номеров с видеопотока (например, с IP-камеры по RTSP-протоколу). Оно анализирует движение в заданных зонах, проверяет наличие объекта (предположительно номера) в зоне интереса (ROI) и сохраняет изображения при выполнении условий.

Платформа и язык:

    Язык программирования: Python.
    Основные библиотеки: OpenCV (cv2), FFmpeg (ffmpeg-python), Tkinter (tkinter), PIL (Pillow), numpy, configparser, subprocess, threading.
    Зависимости: FFmpeg должен быть установлен и доступен в системной переменной PATH.

Архитектура приложения:

Приложение модульное, состоит из нескольких классов, каждый из которых отвечает за свою задачу. Конфигурация хранится в файле config.ini. Графический интерфейс (GUI) позволяет пользователю взаимодействовать с видеопотоком и настраивать зоны детекции.
Основные компоненты и их функциональность

    ConfigManager (config_manager.py)
    Управляет чтением и сохранением настроек из файла config.ini.
        Функции:
            Загружает конфигурацию из файла или создаёт файл с настройками по умолчанию, если он отсутствует.
            Предоставляет методы для получения значений (строки, числа, списки чисел).
        Параметры конфигурации:
            [RTSP]: url — адрес видеопотока (например, rtsp://your_rtsp_url).
            [Directories]: save_dir — папка для сохранения изображений (по умолчанию captured_cars).
            [MotionDetection]:
                motion_rect1, motion_rect2 — координаты двух зон детекции движения (x, y, ширина, высота).
                threshold — порог чувствительности детектора движения (по умолчанию 50).
                delay — минимальный интервал между срабатываниями детектора (по умолчанию 1.0 сек).
            [ROICheck]:
                roi_rect — координаты зоны интереса (ROI) для проверки наличия объекта.
                presence_threshold_percent — процент белых пикселей в ROI для подтверждения наличия объекта (по умолчанию 0.3).
                min_save_interval — минимальный интервал между сохранением изображений (по умолчанию 2.0 сек).
            [UI]: resize_handle_size — размер маркеров для изменения зон (по умолчанию 8 пикселей).
        Логика:
            При отсутствии config.ini создаётся файл с дефолтными значениями.
            Методы get, get_int, get_float, get_list_int обеспечивают доступ к настройкам.
    VideoStreamHandler (video_stream_handler.py)
    Отвечает за подключение к RTSP-потоку и обработку кадров.
        Функции:
            Подключается к видеопотоку с использованием FFmpeg (через subprocess).
            Получает кадры в формате BGR, преобразует их в оттенки серого для анализа.
            Поддерживает многопоточность для чтения кадров и обработки ошибок.
        Особенности:
            Использует ffmpeg-python для проверки потока и получения метаданных (ширина, высота).
            При сбоях (например, потере соединения) автоматически пытается переподключиться каждые 3 секунды.
            Предоставляет методы: read_frame (BGR-кадр), get_frame_grayscale (серый кадр), get_frame_rgb (RGB-кадр).
            Логирует ошибки FFmpeg и состояние потока (например, "Поток успешно запущен").
    MotionDetector (motion_detector.py)
    Детектирует движение в двух заданных зонах (motion_rect1, motion_rect2).
        Параметры:
            Координаты зон (motion_rect1, motion_rect2).
            Порог чувствительности (threshold).
            Задержка между срабатываниями (delay).
        Логика:
            Сравнивает последовательные кадры в оттенках серого.
            Вычисляет разницу пикселей и применяет порог для определения движения.
            Возвращает True, если движение обнаружено в любой из зон, и обновляет время последнего срабатывания.
    ROIManager (roi_manager.py)
    Проверяет наличие объекта в зоне интереса (ROI), предположительно автомобильного номера.
        Параметры:
            Координаты зоны ROI (roi_rect: x, y, ширина, высота).
            Порог присутствия (presence_threshold_percent) — доля белых пикселей.
        Логика:
            Извлекает область ROI из RGB-кадра.
            Преобразует её в оттенки серого и бинаризует (порог 200).
            Подсчитывает процент белых пикселей.
            Возвращает True, если доля белых пикселей превышает заданный порог (например, 30%).
    ImageSaver (image_saver.py)
    Сохраняет изображения в заданную папку при выполнении условий.
        Параметры:
            Папка для сохранения (save_dir).
            Минимальный интервал между сохранениями (min_save_interval).
        Логика:
            Проверяет, прошло ли достаточно времени с последнего сохранения.
            Сохраняет кадр в формате PNG с именем вида car_ГГГГММДД_ЧЧММСС.png.
            Конвертирует кадр из RGB в BGR перед сохранением.
    GUIHandler (gui_handler.py)
    Обеспечивает графический интерфейс для отображения видеопотока и настройки зон.
        Функции:
            Отображает видеопоток в окне Tkinter (размер окна по умолчанию 1280x720).
            Рисует зоны детекции: motion_rect1 (красная), motion_rect2 (синяя), ROI (зелёная).
            Позволяет перетаскивать и изменять размеры зон с помощью мыши.
            Показывает маркеры изменения размеров (жёлтые квадраты) при взаимодействии.
            Сохраняет изменения зон в config.ini.
        Логика обработки событий:
            Обрабатывает нажатия мыши (on_mouse_press), движение (on_mouse_move), отпускание (on_mouse_release).
            Поддерживает перетаскивание зон и изменение их размеров (8 направлений: углы и стороны).
            Ограничивает координаты зон, чтобы они не выходили за пределы кадра.
        Обновление кадров:
            Вызывает update_frame каждые 50 мс для обновления изображения.
            Проверяет движение (motion_detector.detect) и наличие объекта в ROI (roi_manager.is_object_present).
            Сохраняет кадр (image_saver.save), если обнаружено движение и объект в ROI, с учётом задержки.
    Main (main.py)
    Точка входа приложения.
        Инициализирует все компоненты, передавая параметры из config.ini.
        Запускает GUI через gui_handler.run().

Логика работы приложения

    Инициализация:
        Читается конфигурация из config.ini (или создаётся по умолчанию).
        Запускается видеопоток по RTSP-адресу.
        Инициализируются зоны детекции и ROI на основе координат из конфигурации.
    Основной цикл:
        Видеопоток отображается в окне GUI.
        Пользователь может перетаскивать или изменять зоны (две для детекции движения, одна для ROI).
        При обнаружении движения в любой из зон (motion_rect1 или motion_rect2) проверяется наличие объекта в ROI.
        Если объект присутствует (например, номер автомобиля), кадр сохраняется в папку save_dir с учётом интервала min_save_interval.
    Условия сохранения изображения:
        Движение обнаружено в одной из зон (motion_detector.detect возвращает True).
        Прошло достаточно времени с последнего срабатывания (motion_detector.delay).
        В зоне ROI присутствует объект (roi_manager.is_object_present возвращает True).
        Прошло достаточно времени с последнего сохранения (image_saver.min_save_interval).
    Завершение:
        При закрытии окна (WM_DELETE_WINDOW) видеопоток завершается, а приложение корректно освобождает ресурсы.

Требования для запуска

    Система: Windows/Linux/MacOS с установленным Python 3.x.
    Библиотеки:
        opencv-python
        ffmpeg-python
        Pillow
        numpy
    FFmpeg: Установлен и добавлен в PATH.
    RTSP-поток: Доступный адрес камеры (например, rtsp://username:password@ip_address/stream).
    Папка для хранения: Должна быть доступна для записи (по умолчанию captured_cars).

Пример конфигурации (config.ini)
ini
[RTSP]
url = rtsp://admin:12345@192.168.1.100:554/stream

[Directories]
save_dir = captured_cars

[MotionDetection]
threshold = 50
delay = 1.0
motion_rect1 = 50, 50, 100, 80
motion_rect2 = 150, 100, 120, 90

[ROICheck]
presence_threshold_percent = 0.3
min_save_interval = 2.0
roi_rect = 200, 150, 120, 90

[UI]
resize_handle_size = 8
Как воссоздать приложение

    Создайте структуру проекта:
    text

project/
├── config/
│   └── config.ini
├── src/
│   ├── config_manager.py
│   ├── video_stream_handler.py
│   ├── motion_detector.py
│   ├── roi_manager.py
│   ├── image_saver.py
│   ├── gui_handler.py
├── main.py
Скопируйте код из предоставленных файлов в соответствующие модули.
Установите зависимости:
bash
pip install opencv-python ffmpeg-python Pillow numpy
Настройте FFmpeg:

    Установите FFmpeg и убедитесь, что команда ffmpeg доступна в терминале.

Настройте config.ini:

    Укажите правильный RTSP-адрес.
    Настройте координаты зон и другие параметры по необходимости.

Запустите приложение:
bash

    python main.py
    Использование:
        Видеопоток отобразится в окне.
        Перетаскивайте зоны (красная, синяя — для движения; зелёная — ROI) или изменяйте их размеры.
        Изображения будут сохраняться в папку save_dir при обнаружении движения и объекта в ROI.

Возможные улучшения

    Добавить логирование в файл для отладки.
    Реализовать настройку параметров через GUI (например, порог движения, интервалы).
    Добавить поддержку нескольких камер.
    Улучшить алгоритм детекции номера (например, с использованием машинного обучения).
    Добавить уведомления при сохранении изображения.

Это описание должно быть достаточно подробным, чтобы воссоздать приложение. Если нужно что-то уточнить, добавить или проверить конкретный аспект — дай знать! 🚗📸